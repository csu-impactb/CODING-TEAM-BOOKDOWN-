[["index.html", "ImpactTB/BAA: Standard Operating Procedures for Data Analysis Chapter 1 Overview", " ImpactTB/BAA: Standard Operating Procedures for Data Analysis Colorado State University Coding Team 2022-07-07 Chapter 1 Overview Here, we have built a comprehensive guide to wet lab data collection, sample processing, and computational tool creation for robust and efficient data analysis and dissemination. "],["introduction.html", "Chapter 2 Introduction 2.1 About the project: Immune Mechanisms of Protection against Mycobacterium tuberculosis (IMPAc-TB)", " Chapter 2 Introduction 2.1 About the project: Immune Mechanisms of Protection against Mycobacterium tuberculosis (IMPAc-TB) The objective of the IMPAc-TB program is to get a thorough understanding of the immune responses necessary to avoid initial infection with Mycobacterium tuberculosis (Mtb), formation of latent infection, and progression to active TB illness. To achieve these goals, the National Institute of Allergy and Infectious Diseases awarded substantial funding and established multidisciplinary research teams that will analyze immune responses against Mtb in animal models (mice, guinea pigs, and non-human primates) and humans, as well as immune responses elicited by promising vaccine candidates. The contract awards establish and give up to seven years of assistance for IMPAc-TB Centers to explain the immune responses required for Mtb infection protection. The seven centers that are part of the study are (in alphabetical order): Colorado State University Harvard T.H. Chan School of Public Health Seattle Children Hospital Colorado State University Team and role of each member: Dr. Marcela Henao-Tamayo: Principal Investigator Dr. Brendan Podell: Principal Investigator Dr. Andres Obregon-Henao: Research Scientist-III Dr. Taru S. Dutt: Research Scientist-I "],["initial-mouse-characteristics.html", "Chapter 3 Initial mouse characteristics", " Chapter 3 Initial mouse characteristics Here is a review of existing methods. "],["mouse-weights.html", "Chapter 4 Mouse Weights", " Chapter 4 Mouse Weights 4.0.1 Overview Extreme weight loss and loss of muscle mass, also known as cachexia, typically presents along side chronic inflammatory illnesses like Tuberculosis disease @ [baazim2022interplay]. We now recognize that cachexia is part of a systemic response to inflammation, and has been linked to upregulation of pro-inflammatory cytokines such as TNF, IL-6, and IFNg in humans @ [baazim2022interplay]. Additionally, studies support the role of key immune cell populations such as CD8+ T-cells that, when depleted, counteract muscle and fat deterioration @[baazim2019cd8], and suggest that CD8+ T-cells may metabolically reprogram adipose tissue. In recognition of cachexia related illnesses and diseases, we tracked the progression of weight loss over the course of this study, as is done with many TB-mouse studies @ [smith2022host], @ [segueni2016controlled]. These data is also useful when correlating to CFU count as well as expression of cytokines and other biological markers @ [smith2022host]. Here, mice are weighed in grams weekly to monitor clinical status as TB patients frequently display weight loss as clinical symptom associated with disease progression. The following contains information about how the data was collected, organized, and curated for analysis in RStudio. 4.0.2 Parameters Weights are recorded in an excel worksheet. Column titles are as follows: who_collected date_collected sex dob notch_id mouse_number weight unit cage_number group notes Groups included are: bcg, saline, bcg+id93, saline+id93, saline+noMtb The notes column contains information regarding clinical observations. good reference: https://elifesciences.org/articles/74419#s4 library(readxl) ## Warning: package &#39;readxl&#39; was built under R version 4.1.2 library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## Warning: package &#39;readr&#39; was built under R version 4.1.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 4.0.3 Read in data Data is stored in one excel sheet, each week is one sheet named as the date -&gt; return vector for each sheet name 4.0.4 Can also use rio to read in the data, more streamlined 4.0.5 Clean data data$before_vaccination %&gt;% select(&quot;sex&quot;, &quot;notch_id&quot;, &quot;weight&quot;, &quot;cage_number&quot;, &quot;group&quot;) #&quot;mouse_number&quot; it couldn&#39;t find this for some reason ## [1] sex notch_id weight cage_number group ## &lt;0 rows&gt; (or 0-length row.names) 4.0.6 Summary statistics 4.0.7 Body weight over time graph and statistics 4.0.8 Weight loss over time graph and statistics 4.0.9 Weight vs CFU 4.0.10 Weight vs ELISA results 4.0.11 Weight vs lesion burden "],["colony-forming-units-to-determine-bacterial-counts.html", "Chapter 5 Colony forming units to determine bacterial counts 5.1 Data description 5.2 Read in data 5.3 Exploratory analysis and quality checks 5.4 Exploratory analysis 5.5 Identify a good dilution for each sample 5.6 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution 5.7 Create initial report information for these data 5.8 Sample ANOVA 5.9 Save processed data to database 5.10 Example one 5.11 Example two", " Chapter 5 Colony forming units to determine bacterial counts 5.1 Data description The data are collected in a spreadsheet with multiple sheets. The first sheet (named “[x]”) is used to record some metadata for the experiment, while the following sheets are used to record CFUs counts from the plates used for samples from each organ, with one sheet per organ. For example, if you plated data from both the lung and spleen, there would be three sheets in the file: one with the metadata, one with the plate counts for the lung, and one with the plate counts for the spleen. The metadata sheet is used to record information about the overall process of plating the data. Values from this sheet will be used in calculating the bacterial load in the original sample based on the CFU counts. This spreadsheet includes the following columns: organ: Include one row for each organ that was plated in the experiment. You should name the organ all in lowercase (e.g., “lung,” “spleen”). You should use the same name to also name the sheet that records data for that organ for example, if you have rows in the metadata sheet for “lung” and “spleen,” then you should have two other sheets in the file, one sheet named “lung” and one named “spleen,” which you’ll use to store the plate counts for each of those organs. prop_resuspended: In this column, give the proportion of that organ that was plated. For example, if you plated half the lung, then in the “lung” row of this spread sheet, you should put 0.5 in the prop_resuspended column. total_resuspended_uL: This column contains an original volume of tissue homogenate. For example, raw lung tissue is homogenized in 500 uL of PBS in a tube containing metal beads. og_aliquot_uL: 100 uL of th total_resuspended slurry would be considered an original aliquot and is used to peform serial dilutions. dilution_factor: Amount of the original stock solution that is present in the total solution, after dilution(s) plated_uL: Amount of suspension + diluent plated on section of solid agar 5.2 Read in data library(readxl) library(dplyr) library(purrr) library(tidyr) library(stringr) #Replace w/ path to CFU sheet path &lt;- c(&quot;DATA/Copy of baa_cfu_sheet.xlsx&quot;) sheet_names &lt;- excel_sheets(path) sheet_names &lt;- sheet_names[!sheet_names %in% c(&quot;metadata&quot;)] merged_data &lt;- list() for(i in 1:length(sheet_names)){ data &lt;- read_excel(path, sheet = sheet_names[i]) %&gt;% mutate(organ = paste0(sheet_names[i])) data &lt;- data %&gt;% #mutate(missing_col = NA) %&gt;% mutate_if(is.double, as.numeric) %&gt;% mutate_if(is.numeric, as.character) %&gt;% pivot_longer(starts_with(&quot;dil_&quot;), names_to = &quot;dilution&quot;, values_to = &quot;CFUs&quot;) %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) merged_data[[i]] &lt;- data } all_data &lt;- bind_rows(merged_data, .id = &quot;column_label&quot;) %&gt;% select(-column_label) 5.3 Exploratory analysis and quality checks 5.4 Exploratory analysis Dimensions of input data: Based on the input data, data were collected for the following organ or organs: The following number of mice were included for each: The following number of replicates were recorded at each count date for each experimental group: The following number of dilutions and dilution level were recorded for each organ: People who plated and collected the data. Date or dates of counting: Based on the input data, the plates included in these data were counted by the following person or persons: Based on the input data, the plates included in these data were counted on the following date or dates: all_data %&gt;% select(organ, who_plated, who_counted, count_date) %&gt;% distinct() ## # A tibble: 3 × 4 ## organ who_plated who_counted count_date ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 lung BK BK &quot;\\&quot;February 21 2022\\&quot;&quot; ## 2 lung BK BK &quot;\\&quot;April 18 2022\\&quot;&quot; ## 3 spleen JR JR &quot;\\&quot;April 25 2022\\&quot;&quot; Distribution of CFUs at each dilution: WE NEED TO ADD SAMPLE CFU PLOTS Here’s a plot that shows how many plates were too numerous to count at each dilution level: Here is a plot that shows how the CFU counts were distributed by dilution level in the data: 5.5 Identify a good dilution for each sample # Make all_data into tidy data and filter for CFUs between 10-75 tidy_cfu_data &lt;- all_data %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) %&gt;% filter(CFUs &gt;= 10 &amp; CFUs &lt;= 75) %&gt;% mutate(CFUs = as.numeric(CFUs)) 5.6 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution # Calculating CFU/ml for every qualifying replicate between 10-75 CFUs. Column binding by organ name to the metadata sheet via inner_join(). meta &lt;- read_excel(path, sheet = &quot;metadata&quot;) tidy_cfu_meta_joined &lt;- inner_join(tidy_cfu_data, meta) %&gt;% group_by(groups) %&gt;% mutate(CFUs_per_ml = (CFUs * (dilution_factor^2) * (total_resuspension_mL/volume_plated_ul) * 10)) %&gt;% select(organ, count_date, who_plated, who_counted, groups, mouse, dilution, CFUs, CFUs_per_ml) %&gt;% ungroup() ## Joining, by = &quot;organ&quot; tidy_cfu_meta_joined ## # A tibble: 146 × 9 ## organ count_date who_plated who_counted groups mouse dilution CFUs ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lung &quot;\\&quot;February 21 2022… BK BK group… A 3 53 ## 2 lung &quot;\\&quot;February 21 2022… BK BK group… A 5 4 ## 3 lung &quot;\\&quot;February 21 2022… BK BK group… A 6 2 ## 4 lung &quot;\\&quot;February 21 2022… BK BK group… B 3 119 ## 5 lung &quot;\\&quot;February 21 2022… BK BK group… B 4 48 ## 6 lung &quot;\\&quot;February 21 2022… BK BK group… B 5 18 ## 7 lung &quot;\\&quot;February 21 2022… BK BK group… C 3 120 ## 8 lung &quot;\\&quot;February 21 2022… BK BK group… C 4 32 ## 9 lung &quot;\\&quot;February 21 2022… BK BK group… D 3 53 ## 10 lung &quot;\\&quot;February 21 2022… BK BK group… D 4 31 ## # … with 136 more rows, and 1 more variable: CFUs_per_ml &lt;dbl&gt; 5.7 Create initial report information for these data 5.8 Sample ANOVA cfu_stats &lt;- tidy_cfu_meta_joined %&gt;% group_by(organ) %&gt;% nest() %&gt;% mutate(aov_result = map(data, ~aov(CFUs_per_ml ~ groups, data = .x)), tukey_result = map(aov_result, TukeyHSD), tidy_tukey = map(tukey_result, broom::tidy)) %&gt;% unnest(tidy_tukey, .drop = TRUE) %&gt;% separate(contrast, into = c(&quot;contrast1&quot;, &quot;contrast2&quot;), sep = &quot;-&quot;) %&gt;% select(-data, -aov_result, -tukey_result, -term, -null.value)# %&gt;% ## Warning: The `.drop` argument of `unnest()` is deprecated as of tidyr 1.0.0. ## All list-columns are now preserved. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. # filter(adj.p.value &lt;= 0.05) cfu_stats ## # A tibble: 9 × 7 ## # Groups: organ [2] ## organ contrast1 contrast2 estimate conf.low conf.high adj.p.value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lung group_2 group_1 -15.0 -39.4 9.34 0.377 ## 2 lung group_3 group_1 -13.1 -39.2 13.1 0.562 ## 3 lung group_4 group_1 -2.57 -27.1 22.0 0.993 ## 4 lung group_3 group_2 1.98 -22.7 26.7 0.997 ## 5 lung group_4 group_2 12.5 -10.5 35.5 0.491 ## 6 lung group_4 group_3 10.5 -14.4 35.4 0.689 ## 7 spleen group_2 group_1 -21.5 -48.8 5.80 0.146 ## 8 spleen group_3 group_1 -17.6 -45.9 10.7 0.294 ## 9 spleen group_3 group_2 3.90 -23.4 31.2 0.935 5.9 Save processed data to database 5.10 Example one 5.11 Example two "],["enzyme-linked-immunosorbest-assay-elisa.html", "Chapter 6 Enzyme-linked immunosorbest assay (ELISA) 6.1 Read in data from excel file 6.2 Tidy the data 6.3 Read in second data set 6.4 Join the OD table with the information table 6.5 Separate the information tabke into sample ID and dilution columns 6.6 ELISA data analysis optimization", " Chapter 6 Enzyme-linked immunosorbest assay (ELISA) ELISA is a standard molecular biology assay for detecting and quantifying a variety of compounds, including peptides, proteins, and antibodies in a sample. The sample could be serum, plasma, or bronchoalveolar lavage fluid (BALF). 6.0.0.1 Importance of ELISA An antigen-specific reaction in the host results in the production of antibodies, which are proteins found in the blood. In the event of an infectious disease, it aids in the detection of antibodies in the body.ELISA is distinguishable from other antibody-assays in that it produces quantifiable findings and separates non-specific from specific interactions by serial binding to solid surfaces, which is often a polystyrene multiwell plate. In IMPAc-TB project, it is crucial to evaluate the if the vaccine is eliciting humoral immunity and generating antibodies against vaccine antigen. ELISA will be used to determine the presence of Immunoglobulin (Ig) IgG, IgA, and IgM in the serum different time points post-vaccination. 6.0.0.2 Principle of ELISA ELISA is based on the principle of antigen-antibody interaction. An antigen must be immobilized on a solid surface and then complexed with an enzyme-linked antibody in an ELISA. The conjugated enzyme’s activity is evaluated by incubating it with a substrate to yield a quantifiable result, which enables detection. There are four basic steps of ELISA: 1. Coating multiwell plate with antigen/antibody: This step depends on what we want to detect the sample. If we need to evaluate the the presence of antibody, the plate will be coated with the antigen, and vice versa. To coat the plate, a fixed concentration of antigen (protein) is added to a 96 well high-binding plate (charged plate). Plate is incubated over night with the antigen at 4 degree celsius (as proteins are temperature sensitive) so that antigens are completely bound to the well. 2. Blocking: It is possible that not each and every site of the well is coated with the targeted antigen, and there could be uncovered areas. It is important to block those empty spaces so that primary antibody (which we will add to the next step) binds to these spaces and give us false positive results. For this, microplate well surface-binding sites are blocked with an unrelated protein or other substance.Most common blocking agents are bovine serum albumin, skim milk, and casein. One of the best blocking agents is to use the serum from the organism in which your secondary (detection antibody) is raised. For example, if the secondary antibody is raised in goat, then we can use goat serum as a blocking agent. 3. Probing: Probing is the step where we add sample containing antibodies that we want to detect. This will be the primary antibody. If the antibodies against the antigen (which we have coated) are present in the sample, it will bind to the antigen with high affinity. 4. Washing: After the incubation of sample containing primary antibody, the wells are washed so that any unbound antibody is washed away. Washing solution contains phosphate buffer saline + 0.05% tween-20 (a mild detergent). 0.05% tween-20 washes away all the non-specific interactions as those are not strong, but keeps all the specific interaction as those are strong and cannot be detached with mild detergent. 5. Detection: To detect the presence of antibody-antigen complex, a secondary antibody labelled with an enzyme (usually horseradish peroxidase) is added to the wells, incubated and washed. 6. Signal Measurement: Finally to detect “if” and “how much” of the antibody is present, a chromogenic substrate (like 3,3’,5,5’-Tetramethylbenzidine) is added to the wells, which can be cleaved the the enzyme that is tagged to the secondary antibody. The color compund is formed after the addition of the substrate, which is directly proportional to the amount of antibody present in the sample. The plate is read on a plate reader, where color is converted to numbers. Figure 6.1: A caption 6.1 Read in data from excel file library(readxl) library(tidyverse) elisa_raw_data &lt;- read_excel(&quot;DATA/elisa_s1_07-25-20.xlsx&quot;, sheet = &quot;S1&quot;, col_names = FALSE, range = &quot;B2:M9&quot;) ## New names: ## • `` -&gt; `...1` ## • `` -&gt; `...2` ## • `` -&gt; `...3` ## • `` -&gt; `...4` ## • `` -&gt; `...5` ## • `` -&gt; `...6` ## • `` -&gt; `...7` ## • `` -&gt; `...8` ## • `` -&gt; `...9` ## • `` -&gt; `...10` ## • `` -&gt; `...11` ## • `` -&gt; `...12` head(elisa_raw_data) ## # A tibble: 6 × 12 ## ...1 ...2 ...3 ...4 ...5 ...6 ...7 ...8 ...9 ...10 ...11 ...12 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.199999999… 0.05 0.069 6.3E… 0.061 0.122 0.16… 0.145 0.135 6.80… 0.053 0.05 ## 2 7.900000000… 0.098 0.069 6.80… 0.115 0.202 5.89… 0.134 0.069 0.106 0.05 0.075 ## 3 8.899999999… 0.133 0.119 OVRF… 3.87 2.32 OVRF… 3.85 2.12 OVRF… 3.21 1.02 ## 4 OVRFLW 3.46 1.16 OVRF… 3.80 2.36 OVRF… 3.70 1.49 OVRF… 3.68 1.63 ## 5 3.815999999… 1.82 0.446 3.89… 3.42 1.13 OVRF… 2.33 0.608 OVRF… 3.41 1.10 ## 6 OVRFLW 3.69 1.43 OVRF… 3.66 1.27 3.839 1.74 0.444 2.49… 0.637 0.704 6.2 Tidy the data # Convert all columns to numeric elisa_raw_data_numeric &lt;- elisa_raw_data %&gt;% mutate_if(is.character, as.numeric) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion # pivot longer the data elisa_raw_data_tidy &lt;- pivot_longer(data = elisa_raw_data_numeric, cols = &quot;...1&quot;:&quot;...12&quot;, names_to = &quot;well_id&quot;, values_to = &quot;od_450nm&quot;) # remove &quot;...&quot; from the first column elisa_raw_data_tidy$well_id &lt;- str_replace(elisa_raw_data_tidy$well_id, &quot;...&quot;, &quot;&quot;) # Add new column to the data_frame elisa_raw_data_tidy_new &lt;- elisa_raw_data_tidy %&gt;% mutate(name = rep(LETTERS[1:8], each = 12)) elisa_raw_data_tidy_new &lt;- elisa_raw_data_tidy_new %&gt;% mutate(well_id = paste0(name, well_id)) %&gt;% select(-name) head(elisa_raw_data_tidy_new) ## # A tibble: 6 × 2 ## well_id od_450nm ## &lt;chr&gt; &lt;dbl&gt; ## 1 A1 0.052 ## 2 A2 0.05 ## 3 A3 0.069 ## 4 A4 0.063 ## 5 A5 0.061 ## 6 A6 0.122 6.3 Read in second data set elisa_label_data &lt;- read_excel(&quot;DATA/elisa_s1_07-25-20.xlsx&quot;, sheet = &quot;S1&quot;, col_names = FALSE, range = &quot;Q2:AB9&quot;) ## New names: ## • `` -&gt; `...1` ## • `` -&gt; `...2` ## • `` -&gt; `...3` ## • `` -&gt; `...4` ## • `` -&gt; `...5` ## • `` -&gt; `...6` ## • `` -&gt; `...7` ## • `` -&gt; `...8` ## • `` -&gt; `...9` ## • `` -&gt; `...10` ## • `` -&gt; `...11` ## • `` -&gt; `...12` head(elisa_label_data) ## # A tibble: 6 × 12 ## ...1 ...2 ...3 ...4 ...5 ...6 ...7 ...8 ...9 ...10 ...11 ...12 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 blank secon… naïv… 1A-1… 1A-1… 1A-1… 1A-2… 1A-2… 1A-2… 1A-3… 1A-3… 1A-3… ## 2 1A-4 (1/250 1A-4 … 1A-4… 1B-1… 1B-1… 1B-1… 1B-2… 1B-2… 1B-2… 1B-3… 1B-3… 1B-3… ## 3 1B-4 (1/250 1B-4 … 1B-4… 2A-1… 2A-1… 2A-1… 2A-2… 2A-2… 2A-2… 2A-3… 2A-3… 2A-3… ## 4 2B-1 (1/250 2B-1 … 2B-1… 2B-2… 2B-2… 2B-2… 2B-3… 2B-3… 2B-3… 2B-4… 2B-4… 2B-4… ## 5 3A-1 (1/250 3A-1 … 3A-1… 3A-2… 3A-2… 3A-2… 3A-3… 3A-3… 3A-3… 3A-4… 3A-4… 3A-4… ## 6 3B-1 (1/250 3B-1 … 3B-1… 3B-2… 3B-2… 3B-2… 3B-3… 3B-3… 3B-3… 3B-4… 3B-4… 3B-4… # pivot longer the data elisa_label_data_tidy &lt;- pivot_longer(data = elisa_label_data, cols = &quot;...1&quot;:&quot;...12&quot;, names_to = &quot;well_id&quot;, values_to = &quot;information&quot;) # remove &quot;...&quot; from the first column elisa_label_data_tidy$well_id &lt;- str_replace(elisa_label_data_tidy$well_id, &quot;...&quot;, &quot;&quot;) # Add new column to the data_frame elisa_label_data_tidy_new &lt;- elisa_label_data_tidy %&gt;% mutate(name = rep(LETTERS[1:8], each = 12)) elisa_label_data_tidy_new &lt;- elisa_label_data_tidy_new %&gt;% mutate(well_id = paste0(name, well_id)) %&gt;% select(-name) head(elisa_label_data_tidy_new) ## # A tibble: 6 × 2 ## well_id information ## &lt;chr&gt; &lt;chr&gt; ## 1 A1 blank ## 2 A2 secondary ## 3 A3 naïve (1/250) ## 4 A4 1A-1 (1/250 ## 5 A5 1A-1 (1/1250 ## 6 A6 1A-1 (1/6250 6.4 Join the OD table with the information table elisa_data = elisa_raw_data_tidy_new %&gt;% inner_join(elisa_label_data_tidy_new, by=&quot;well_id&quot;) head(elisa_data) ## # A tibble: 6 × 3 ## well_id od_450nm information ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 A1 0.052 blank ## 2 A2 0.05 secondary ## 3 A3 0.069 naïve (1/250) ## 4 A4 0.063 1A-1 (1/250 ## 5 A5 0.061 1A-1 (1/1250 ## 6 A6 0.122 1A-1 (1/6250 6.5 Separate the information tabke into sample ID and dilution columns tidy_elisa_data &lt;- separate(elisa_data, col = &quot;information&quot;, into = c(&quot;sample_id&quot;, &quot;dilution&quot;), sep = &quot;\\\\(&quot;) ## Warning: Expected 2 pieces. Missing pieces filled with `NA` in 2 rows [1, 2]. head(tidy_elisa_data) ## # A tibble: 6 × 4 ## well_id od_450nm sample_id dilution ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 A1 0.052 &quot;blank&quot; &lt;NA&gt; ## 2 A2 0.05 &quot;secondary&quot; &lt;NA&gt; ## 3 A3 0.069 &quot;naïve &quot; 1/250) ## 4 A4 0.063 &quot;1A-1 &quot; 1/250 ## 5 A5 0.061 &quot;1A-1 &quot; 1/1250 ## 6 A6 0.122 &quot;1A-1 &quot; 1/6250 tidy_elisa_data &lt;- tidy_elisa_data %&gt;% mutate(dilution = str_extract(dilution, &quot;(/)[0-9]+&quot;), dilution = str_replace(dilution, &quot;/&quot;, &quot;&quot;), dilution = as.numeric(dilution)) tidy_elisa_data &lt;- tidy_elisa_data %&gt;% select(well_id, sample_id, dilution, od_450nm) head(tidy_elisa_data) ## # A tibble: 6 × 4 ## well_id sample_id dilution od_450nm ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A1 &quot;blank&quot; NA 0.052 ## 2 A2 &quot;secondary&quot; NA 0.05 ## 3 A3 &quot;naïve &quot; 250 0.069 ## 4 A4 &quot;1A-1 &quot; 250 0.063 ## 5 A5 &quot;1A-1 &quot; 1250 0.061 ## 6 A6 &quot;1A-1 &quot; 6250 0.122 6.6 ELISA data analysis optimization "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

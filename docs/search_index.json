<<<<<<< HEAD
[["index.html", "ImpactTB/BAA: Standard Operating Procedures for Data Analysis Chapter 1 Overview", " ImpactTB/BAA: Standard Operating Procedures for Data Analysis Colorado State University Coding Team 2022-06-09 Chapter 1 Overview Here, we have built a comprehensive guide to wet lab data collection, sample processing, and computational tool creation for robust and efficient data analysis and dissemination. "],["introduction.html", "Chapter 2 Introduction 2.1 About the project: Immune Mechanisms of Protection against Mycobacterium tuberculosis (IMPAc-TB)", " Chapter 2 Introduction 2.1 About the project: Immune Mechanisms of Protection against Mycobacterium tuberculosis (IMPAc-TB) The objective of the IMPAc-TB program is to get a thorough understanding of the immune responses necessary to avoid initial infection with Mycobacterium tuberculosis (Mtb), formation of latent infection, and progression to active TB illness. To achieve these goals, the National Institute of Allergy and Infectious Diseases awarded substantial funding and established multidisciplinary research teams that will analyze immune responses against Mtb in animal models (mice, guinea pigs, and non-human primates) and humans, as well as immune responses elicited by promising vaccine candidates. The contract awards establish and give up to seven years of assistance for IMPAc-TB Centers to explain the immune responses required for Mtb infection protection. The seven centers that are part of the study are (in alphabetical order): Colorado State University Harvard T.H. Chan School of Public Health Seattle Children Hospital Arizona? "],["initial-mouse-characteristics.html", "Chapter 3 Initial mouse characteristics", " Chapter 3 Initial mouse characteristics Here is a review of existing methods. "],["mouse-weights.html", "Chapter 4 Mouse weights 4.1 Read in data", " Chapter 4 Mouse weights Mice are weighed in grams weekly and recorded in an excel worksheet. Column titles are as follows: who_collected date_collected sex dob notch_id mouse_number weight unit cage_number group notes Groups included are: bcg, saline, bcg+id93, saline+id93, saline+noMtb The notes column contains information regarding clinical observations. library(readxl) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 4.1 Read in data weight_data &lt;- read_xlsx(&quot;DATA/body_weights.xlsx&quot;) "],["clean-data.html", "Chapter 5 Clean data", " Chapter 5 Clean data weight_data %&gt;% select(sex, mouse_number, weight, cage_number, group) ## # A tibble: 0 × 5 ## # … with 5 variables: sex &lt;lgl&gt;, mouse_number &lt;lgl&gt;, weight &lt;lgl&gt;, ## # cage_number &lt;lgl&gt;, group &lt;lgl&gt; "],["summary-statistics.html", "Chapter 6 Summary statistics", " Chapter 6 Summary statistics "],["graph.html", "Chapter 7 Graph", " Chapter 7 Graph "],["colony-forming-units-to-determine-bacterial-counts.html", "Chapter 8 Colony forming units to determine bacterial counts 8.1 Data description 8.2 Read in data 8.3 Exploratory analysis and quality checks 8.4 Identify a good dilution for each sample 8.5 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution 8.6 Create initial report information for these data 8.7 Sample ANOVA 8.8 Save processed data to database 8.9 Example one 8.10 Example two", " Chapter 8 Colony forming units to determine bacterial counts 8.1 Data description The data are collected in a spreadsheet with multiple sheets. The first sheet (named “[x]”) is used to record some metadata for the experiment, while the following sheets are used to record CFUs counts from the plates used for samples from each organ, with one sheet per organ. For example, if you plated data from both the lung and spleen, there would be three sheets in the file: one with the metadata, one with the plate counts for the lung, and one with the plate counts for the spleen. The metadata sheet is used to record information about the overall process of plating the data. Values from this sheet will be used in calculating the bacterial load in the original sample based on the CFU counts. This spreadsheet includes the following columns: organ: Include one row for each organ that was plated in the experiment. You should name the organ all in lowercase (e.g., “lung,” “spleen”). You should use the same name to also name the sheet that records data for that organ for example, if you have rows in the metadata sheet for “lung” and “spleen,” then you should have two other sheets in the file, one sheet named “lung” and one named “spleen,” which you’ll use to store the plate counts for each of those organs. prop_resuspended: In this column, give the proportion of that organ that was plated. For example, if you plated half the lung, then in the “lung” row of this spread sheet, you should put 0.5 in the prop_resuspended column. total_resuspended_uL: This column contains an original volume of tissue homogenate. For example, raw lung tissue is homogenized in 500 uL of PBS in a tube containing metal beads. og_aliquot_uL: 100 uL of th total_resuspended slurry would be considered an original aliquot and is used to peform serial dilutions. dilution_factor: Amount of the original stock solution that is present in the total solution, after dilution(s) plated_uL: Amount of suspension + diluent plated on section of solid agar 8.2 Read in data library(readxl) library(dplyr) library(purrr) library(tidyr) library(stringr) #Replace w/ path to CFU sheet path &lt;- c(&quot;IMPAcTB/CODING-TEAM-BOOKDOWN-/example_spreadsheet/Copy of baa_cfu_sheet.xlsx&quot;) sheet_names &lt;- excel_sheets(path) sheet_names &lt;- sheet_names[!sheet_names %in% c(&quot;metadata&quot;)] merged_data &lt;- list() for(i in 1:length(sheet_names)){ data &lt;- read_excel(path, sheet = sheet_names[i]) %&gt;% mutate(organ = paste0(sheet_names[i])) data &lt;- data %&gt;% #mutate(missing_col = NA) %&gt;% mutate_if(is.double, as.numeric) %&gt;% mutate_if(is.numeric, as.character) %&gt;% pivot_longer(starts_with(&quot;dil_&quot;), names_to = &quot;dilution&quot;, values_to = &quot;CFUs&quot;) %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) merged_data[[i]] &lt;- data } all_data &lt;- bind_rows(merged_data, .id = &quot;column_label&quot;) %&gt;% select(-column_label) 8.3 Exploratory analysis and quality checks 8.3.1 Exploratory analysis Dimensions of input data: Based on the input data, data were collected for the following organ or organs: The following number of mice were included for each: The following number of replicates were recorded at each count date for each experimental group: The following number of dilutions and dilution level were recorded for each organ: People who plated and collected the data. Date or dates of counting: Based on the input data, the plates included in these data were counted by the following person or persons: Based on the input data, the plates included in these data were counted on the following date or dates: all_data %&gt;% select(organ, who_plated, who_counted, count_date) %&gt;% distinct() Distribution of CFUs at each dilution: WE NEED TO ADD SAMPLE CFU PLOTS Here’s a plot that shows how many plates were too numerous to count at each dilution level: Here is a plot that shows how the CFU counts were distributed by dilution level in the data: 8.4 Identify a good dilution for each sample # Make all_data into tidy data and filter for CFUs between 10-75 tidy_cfu_data &lt;- all_data %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) %&gt;% filter(CFUs &gt;= 10 &amp; CFUs &lt;= 75) %&gt;% mutate(CFUs = as.numeric(CFUs)) 8.5 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution # Calculating CFU/ml for every qualifying replicate between 10-75 CFUs. Column binding by organ name to the metadata sheet via inner_join(). meta &lt;- read_excel(path, sheet = &quot;metadata&quot;) tidy_cfu_meta_joined &lt;- inner_join(tidy_cfu_data, meta) %&gt;% group_by(groups) %&gt;% mutate(CFUs_per_ml = (CFUs * (dilution_factor^2) * (total_resuspension_mL/volume_plated_ul) * 10)) %&gt;% select(organ, count_date, who_plated, who_counted, groups, mouse, dilution, CFUs, CFUs_per_ml) %&gt;% ungroup() tidy_cfu_meta_joined 8.6 Create initial report information for these data 8.7 Sample ANOVA cfu_stats &lt;- tidy_cfu_meta_joined %&gt;% group_by(organ) %&gt;% nest() %&gt;% mutate(aov_result = map(data, ~aov(CFUs_per_ml ~ groups, data = .x)), tukey_result = map(aov_result, TukeyHSD), tidy_tukey = map(tukey_result, broom::tidy)) %&gt;% unnest(tidy_tukey, .drop = TRUE) %&gt;% separate(contrast, into = c(&quot;contrast1&quot;, &quot;contrast2&quot;), sep = &quot;-&quot;) %&gt;% select(-data, -aov_result, -tukey_result, -term, -null.value)# %&gt;% # filter(adj.p.value &lt;= 0.05) cfu_stats 8.8 Save processed data to database 8.9 Example one 8.10 Example two "],["elisa-words.html", "Chapter 9 ELISA Words", " Chapter 9 ELISA Words We have finished a nice book. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
=======
[["colony-forming-units-to-determine-bacterial-counts.html", "Chapter 5 Colony forming units to determine bacterial counts 5.1 Data description 5.2 Read in data 5.3 Exploratory analysis and quality checks 5.4 Identify a good dilution for each sample 5.5 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution 5.6 Create initial report information for these data 5.7 Sample ANOVA 5.8 Save processed data to database 5.9 Example one 5.10 Example two", " Chapter 5 Colony forming units to determine bacterial counts 5.1 Data description The data are collected in a spreadsheet with multiple sheets. The first sheet (named “[x]”) is used to record some metadata for the experiment, while the following sheets are used to record CFUs counts from the plates used for samples from each organ, with one sheet per organ. For example, if you plated data from both the lung and spleen, there would be three sheets in the file: one with the metadata, one with the plate counts for the lung, and one with the plate counts for the spleen. The metadata sheet is used to record information about the overall process of plating the data. Values from this sheet will be used in calculating the bacterial load in the original sample based on the CFU counts. This spreadsheet includes the following columns: organ: Include one row for each organ that was plated in the experiment. You should name the organ all in lowercase (e.g., “lung,” “spleen”). You should use the same name to also name the sheet that records data for that organ for example, if you have rows in the metadata sheet for “lung” and “spleen,” then you should have two other sheets in the file, one sheet named “lung” and one named “spleen,” which you’ll use to store the plate counts for each of those organs. prop_resuspended: In this column, give the proportion of that organ that was plated. For example, if you plated half the lung, then in the “lung” row of this spread sheet, you should put 0.5 in the prop_resuspended column. total_resuspended_uL: This column contains an original volume of tissue homogenate. For example, raw lung tissue is homogenized in 500 uL of PBS in a tube containing metal beads. og_aliquot_uL: 100 uL of th total_resuspended slurry would be considered an original aliquot and is used to peform serial dilutions. dilution_factor: Amount of the original stock solution that is present in the total solution, after dilution(s) plated_uL: Amount of suspension + diluent plated on section of solid agar 5.2 Read in data library(readxl) library(dplyr) library(purrr) library(tidyr) library(stringr) #Replace w/ path to CFU sheet path &lt;- c(&quot;DATA/Copy of baa_cfu_sheet.xlsx&quot;) sheet_names &lt;- excel_sheets(path) sheet_names &lt;- sheet_names[!sheet_names %in% c(&quot;metadata&quot;)] merged_data &lt;- list() for(i in 1:length(sheet_names)){ data &lt;- read_excel(path, sheet = sheet_names[i]) %&gt;% mutate(organ = paste0(sheet_names[i])) data &lt;- data %&gt;% #mutate(missing_col = NA) %&gt;% mutate_if(is.double, as.numeric) %&gt;% mutate_if(is.numeric, as.character) %&gt;% pivot_longer(starts_with(&quot;dil_&quot;), names_to = &quot;dilution&quot;, values_to = &quot;CFUs&quot;) %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) merged_data[[i]] &lt;- data } all_data &lt;- bind_rows(merged_data, .id = &quot;column_label&quot;) %&gt;% select(-column_label) 5.3 Exploratory analysis and quality checks 5.3.1 Exploratory analysis Dimensions of input data: Based on the input data, data were collected for the following organ or organs: The following number of mice were included for each: The following number of replicates were recorded at each count date for each experimental group: The following number of dilutions and dilution level were recorded for each organ: People who plated and collected the data. Date or dates of counting: Based on the input data, the plates included in these data were counted by the following person or persons: Based on the input data, the plates included in these data were counted on the following date or dates: all_data %&gt;% select(organ, who_plated, who_counted, count_date) %&gt;% distinct() ## # A tibble: 3 × 4 ## organ who_plated who_counted count_date ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 lung BK BK &quot;\\&quot;February 21 2022\\&quot;&quot; ## 2 lung BK BK &quot;\\&quot;April 18 2022\\&quot;&quot; ## 3 spleen JR JR &quot;\\&quot;April 25 2022\\&quot;&quot; Distribution of CFUs at each dilution: WE NEED TO ADD SAMPLE CFU PLOTS Here’s a plot that shows how many plates were too numerous to count at each dilution level: Here is a plot that shows how the CFU counts were distributed by dilution level in the data: 5.4 Identify a good dilution for each sample # Make all_data into tidy data and filter for CFUs between 10-75 tidy_cfu_data &lt;- all_data %&gt;% mutate(dilution = str_extract(dilution, &quot;[0-9]+&quot;), dilution = as.numeric(dilution)) %&gt;% filter(CFUs &gt;= 10 &amp; CFUs &lt;= 75) %&gt;% mutate(CFUs = as.numeric(CFUs)) 5.5 Calculate CFUs from best dilution/Estimate bacterial load for each sample based on good dilution # Calculating CFU/ml for every qualifying replicate between 10-75 CFUs. Column binding by organ name to the metadata sheet via inner_join(). meta &lt;- read_excel(path, sheet = &quot;metadata&quot;) tidy_cfu_meta_joined &lt;- inner_join(tidy_cfu_data, meta) %&gt;% group_by(groups) %&gt;% mutate(CFUs_per_ml = (CFUs * (dilution_factor^2) * (total_resuspension_mL/volume_plated_ul) * 10)) %&gt;% select(organ, count_date, who_plated, who_counted, groups, mouse, dilution, CFUs, CFUs_per_ml) %&gt;% ungroup() ## Joining, by = &quot;organ&quot; tidy_cfu_meta_joined ## # A tibble: 146 × 9 ## organ count_date who_plated who_counted groups mouse dilution CFUs ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lung &quot;\\&quot;February 21 2022… BK BK group… A 3 53 ## 2 lung &quot;\\&quot;February 21 2022… BK BK group… A 5 4 ## 3 lung &quot;\\&quot;February 21 2022… BK BK group… A 6 2 ## 4 lung &quot;\\&quot;February 21 2022… BK BK group… B 3 119 ## 5 lung &quot;\\&quot;February 21 2022… BK BK group… B 4 48 ## 6 lung &quot;\\&quot;February 21 2022… BK BK group… B 5 18 ## 7 lung &quot;\\&quot;February 21 2022… BK BK group… C 3 120 ## 8 lung &quot;\\&quot;February 21 2022… BK BK group… C 4 32 ## 9 lung &quot;\\&quot;February 21 2022… BK BK group… D 3 53 ## 10 lung &quot;\\&quot;February 21 2022… BK BK group… D 4 31 ## # … with 136 more rows, and 1 more variable: CFUs_per_ml &lt;dbl&gt; 5.6 Create initial report information for these data 5.7 Sample ANOVA cfu_stats &lt;- tidy_cfu_meta_joined %&gt;% group_by(organ) %&gt;% nest() %&gt;% mutate(aov_result = map(data, ~aov(CFUs_per_ml ~ groups, data = .x)), tukey_result = map(aov_result, TukeyHSD), tidy_tukey = map(tukey_result, broom::tidy)) %&gt;% unnest(tidy_tukey, .drop = TRUE) %&gt;% separate(contrast, into = c(&quot;contrast1&quot;, &quot;contrast2&quot;), sep = &quot;-&quot;) %&gt;% select(-data, -aov_result, -tukey_result, -term, -null.value)# %&gt;% ## Warning: The `.drop` argument of `unnest()` is deprecated as of tidyr 1.0.0. ## All list-columns are now preserved. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. # filter(adj.p.value &lt;= 0.05) cfu_stats ## # A tibble: 9 × 7 ## # Groups: organ [2] ## organ contrast1 contrast2 estimate conf.low conf.high adj.p.value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lung group_2 group_1 -15.0 -39.4 9.34 0.377 ## 2 lung group_3 group_1 -13.1 -39.2 13.1 0.562 ## 3 lung group_4 group_1 -2.57 -27.1 22.0 0.993 ## 4 lung group_3 group_2 1.98 -22.7 26.7 0.997 ## 5 lung group_4 group_2 12.5 -10.5 35.5 0.491 ## 6 lung group_4 group_3 10.5 -14.4 35.4 0.689 ## 7 spleen group_2 group_1 -21.5 -48.8 5.80 0.146 ## 8 spleen group_3 group_1 -17.6 -45.9 10.7 0.294 ## 9 spleen group_3 group_2 3.90 -23.4 31.2 0.935 5.8 Save processed data to database 5.9 Example one 5.10 Example two "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> 8a138539a808f175b7bd2323154b68b2f03ada41
